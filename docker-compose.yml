services:
  postgres:
    container_name: n8n_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DATABASE}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 30s
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DATABASE}"]
      timeout: 5s
    image: postgres:15
    networks:
      - n8n_network
    restart: unless-stopped
    volumes:
      - postgres_data:/var/lib/postgresql/data

  traefik:
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--certificatesresolvers.letsencrypt.acme.email=${CERT_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--global.checkNewVersion=false"
      - "--global.sendAnonymousUsage=false"
      - "--ping=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker=true"
    container_name: traefik
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 40s
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:8080/ping || exit 1"]
      timeout: 10s
    image: traefik:v3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.routers.traefik-health.rule=Host(`traefik.${DOMAIN}`) && PathPrefix(`/ping`)"
      - "traefik.http.routers.traefik-health.service=api@internal"
      - "traefik.http.routers.traefik-health.priority=1"
    networks:
      - n8n_network
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/letsencrypt

  n8n:
    container_name: n8n
    depends_on:
      postgres:
        condition: service_healthy
      traefik:
        condition: service_healthy
    environment:
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DATABASE}
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_PORT: ${POSTGRES_PORT}
      DB_POSTGRESDB_SCHEMA: ${POSTGRES_SCHEMA}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_TYPE: "postgresdb"
      GENERIC_TIMEZONE: ${N8N_TIMEZONE}
      N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS: "true"
      N8N_HOST: "${DOMAIN}"
      N8N_PORT: "5678"
      N8N_PROTOCOL: "https"
      N8N_RUNNERS_ENABLED: "true"
      TZ: ${N8N_TIMEZONE:-UTC}
      WEBHOOK_URL: "https://${DOMAIN}"
    healthcheck:
      interval: 30s
      retries: 3
      start_period: 60s
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:5678/healthz || exit 1"]
      timeout: 10s
    image: docker.n8n.io/n8nio/n8n
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.n8n-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.n8n-http.entrypoints=web"
      - "traefik.http.routers.n8n-http.middlewares=n8n-redirect"
      - "traefik.http.routers.n8n-http.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.n8n.entrypoints=websecure"
      - "traefik.http.routers.n8n.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.n8n.tls=true"
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    networks:
      - n8n_network
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - n8n_data:/home/node/.n8n

volumes:
  n8n_data:
    external: true
  postgres_data:
  traefik_certs:

networks:
  n8n_network:
    driver: bridge
